AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Roles and Policies

Parameters:
  EnvironmentName:
    Default: alpha
    Description: Name of the environment this cloudformation stack belongs to
    Type: String

  EnvironmentType:
    Default: nonproduction
    Description: Type of the environment for this stack
    Type: String
    AllowedValues:
      - nonproduction
      - production

Resources:

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  ECSServiceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # cognito 
                - 'cognito-idp:*'
              Resource: '*'

Outputs:
  ECSTaskRole:
    Description: ECS Task Execution Role
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Join [':', [ !Ref EnvironmentName, ECSWorkerWebAppTaskRole ]]

  ECSServiceExecutionRole:
    Description: ECS Service Execution Role
    Value: !GetAtt ECSServiceExecutionRole.Arn
    Export:
      Name: !Join [':', [ !Ref EnvironmentName, ECSWorkerWebAppExecutionRole ]]

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/WWA-${EnvironmentName}
      RetentionInDays: 7

  WorkerWebAppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${EnvironmentName}:ECSWorkerWebAppTaskRole
      TaskRoleArn:
        Fn::ImportValue: !Sub ${EnvironmentName}:ECSWorkerWebAppExecutionRole
      Family: !Sub wwa-srv-task-${EnvironmentName}
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        -
          Name: WorkerWebAppAPI
          Image: !Sub 574574226067.dkr.ecr.us-east-1.amazonaws.com/worker-web-app:${AppVersion}
          PortMappings:
            - ContainerPort: 8081
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: worker-web-app-srv

  WorkerWebAppECSService:
    Type: AWS::ECS::Service
    DependsOn: WebListenerRule
    Properties:
      Cluster:
        Fn::ImportValue: !Sub ${EnvironmentName}:WorkerWebAppECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: WorkerWebAppAPI
          ContainerPort: 3002
          TargetGroupArn: !Ref WebTargetGroup

      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
          - Fn::ImportValue: !Sub ${EnvironmentName}:SubnetAZ1Private
          - Fn::ImportValue: !Sub ${EnvironmentName}:SubnetAZ2Private
          SecurityGroups:
            - Fn::ImportValue: !Sub ${EnvironmentName}:ContainerSecurityGroup
      ServiceName: !Sub wwa-srv-${EnvironmentName}
      TaskDefinition: !Ref WorkerWebAppTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      TargetType: ip
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      HealthCheckPath: /service_status
      HealthCheckProtocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: "60"

  WebListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub ${EnvironmentName}:WorkerWebAppLoadBalancerListener
      Priority: 100
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      Actions:
        - TargetGroupArn: !Ref WebTargetGroup
          Type: forward

Outputs:
  WorkerWebAppStatusEndpoint:
    Description: Endpoint for service status
    Value: !Sub
      - 'http://${LoadBalancerEndpoint}/service_status'
      -
        LoadBalancerEndpoint:
          Fn::ImportValue: !Sub ${EnvironmentName}:WorkerWebAppDomainName